#ifndef CALCULATOR_H
#define CALCULATOR_H
#include <iostream>
#include <bitset>
#include <string>
#include <fstream>
#include <cstring>
#include <stdio.h>
#include <sstream>
#include <QObject>
#include <QDebug>
#include <QFile>
#include <QString>
#include <QFileInfo>
#include <QTime>
#include <math.h>
#include <QElapsedTimer>

#include <QThread>

using namespace std;
typedef bitset<8> bytes;
typedef bitset<32> word;

const int N_round = 10;
const int N_key = 4;

class Calculator : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString sendFileSize READ getFileSize)
    Q_PROPERTY(QString sendEncryptFileName READ getEncryptFileName)
public:

    bytes S_Box[16][16] = {
        {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
        {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
        {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
        {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
        {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
        {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
        {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
        {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
        {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
        {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
        {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
        {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
        {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
        {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
        {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
        {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
    };

    bytes Inv_S_Box[16][16] = {
        {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
        {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
        {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
        {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
        {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
        {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
        {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
        {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
        {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
        {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
        {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
        {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
        {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
        {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
        {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
        {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}
    };

    //轮常数，密钥扩展中用到。（AES-128只需要10轮）
    word Rcon[10] = { 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
                     0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000 };

    Calculator();
//    将连续的128位分成16组，存到一个 byte 数组中
    void divideToByte(bytes out[16], bitset<128>& data);
//    将一个char字符数组转化为二进制存到一个 byte 数组中
    void charToByte(bytes out[16], const char s[16]);
//    将16个 byte 合并成连续的128位
    bitset<128> mergeByte(bytes in[16]);

//    密钥扩展函数 - 对128位密钥进行扩展得到 w[4*(Nr+1),Nr为轮数
    void KeyExpansion(bytes key[4 * N_key], word w[4 * (N_round + 1)]);
//    将4个 byte 转换为一个 word
    word ToWord(bytes& k1, bytes& k2, bytes& k3, bytes& k4);
//    首先定义位置变换函数RotWord(),作用是接受一个字 [a0, a1, a2, a3]作为输入，循环左移一个字节后输出[a1, a2, a3, a0]
    word RotWord(const word& rw);
//    定义S盒变换函数SubWord()，接受一个字 [a0, a1, a2, a3] 作为输入，然后每一个byte，例如a0，前四个字节为行，后四个字节为列，从S_Box中查找并且返回四个元素
    word SubWord(const word& sw);
//    轮密钥加变换 - 将每一列与扩展密钥进行异或
    void AddRoundKey(bytes mtx[4 * 4], word k[4]);
//    有限域上的乘法 GF(2^8)
    bytes GFMul(bytes a, bytes b);

//    S盒变换 - 前4位为行号，后4位为列号
    void SubBytes(bytes mtx[4 * 4]);
//    正向行变换 - 按字节循环移位
    void ShiftRows(bytes mtx[4 * 4]);
//    正向列变换
    void MixColumns(bytes mtx[4 * 4]);
//    加密
    void encrypt(bytes in[4 * 4], word w[4 * (N_round + 1)]);

//    逆S盒变换
    void InvSubBytes(bytes mtx[4 * 4]);
//    逆行变换 - 以字节为单位循环右移
    void InvShiftRows(bytes mtx[4 * 4]);
//    反向列混淆
    void InvMixColumns(bytes mtx[4 * 4]);
//    解密
    void decrypt(bytes in[4 * 4], word w[4 * (N_round + 1)]);

    Q_INVOKABLE void aesTest();
    Q_INVOKABLE int getFileSize(QString fileName);
    void encryptChooseFile(QString filePath, QString passwordKey);
    Q_INVOKABLE int getEncryptFileSize(QString fileName);
    void decryptChooseFile(QString filePath, QString passwordKey);


    QString fileSize;
    QString encryptFileName;

    QString getFileSize(){
        return fileSize;
    }
    QString getEncryptFileName(){
        return encryptFileName;
    }
};

#endif // CALCULATOR_H










